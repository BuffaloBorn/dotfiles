[user]
  name = carl-mcgruder
  email = carl.mcgruder@gmail.com
[alias]
  aa = add --all
  ad = !git add -A && git diff --cached
  ap = commit --amend -C HEAD
  b = branch
  # No color, short messages
  basic = log --pretty='%h %s'
  bd = !sh -c 'git branch -D $1 && git push origin :$1' -
  bm = branch --merged
  bselect = !git branch | grep -v '^*' | fzf-tmux --reverse | xargs git checkout
  c = commit -v -S
  ca = commit --amend --verbose
  car = commit --amend --no-edit
  ci = commit
  cp = cherry-pick
  co = checkout
  # Check out a pull request by number: g co-pr 123
  co-pr = !sh -c 'git fetch origin pull/$1/head:pr/$1 && git checkout pr/$1' -
  conflicted = !vim +Conflicted
  contrib = !sh -c 'git log $1 --pretty=format:%an | sort | uniq' -
  com = checkout master
  copysha = !git rev-parse HEAD | pbcopy
  d = diff --color
  dc = diff --cached --color
  dcw = !git dc -w
  # Delete branch locally and remotely. Used by `git mm`
  df = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
  dfw = !git df -w
  dic = diff --cached
  f = fetch
  fall = fetch --all
  # Full commit messages without all the junk from `log --pretty=full`
  full = log -1 --pretty='%C(red)%H%nAuthor: %C(green)%an%n%C(magenta)%s%n%b'
  g = grep --color
  gg = grep --extended-regexp --break --heading --line-number
  glog = log -E -i --grep
  ignore-date = rebase origin/master --ignore-date
  l = log --abbrev-commit --color --decorate --graph --format=format"%Cgreen %h %Creset %s %Cred %ae"
  l2 = log --abbrev-commit --color --decorate --graph
  lg = log --abbrev-commit --color --decorate --graph --pretty=oneline
  lp = log --abbrev-commit --color --decorate --pretty=oneline
  # Merge current branch into master, only if it's a fast-forward. Doesn't check
  # out master if it's not a FF merge.
  mm = !test `git rev-parse master` = $(git merge-base HEAD master) && git checkout master && git merge HEAD@{1} && git push && git bd $(git rev-parse --abbrev-ref @{-1}) || echo "Non-fastforward"
  #mm = !git checkout master && git merge @{-1}
  mup = !git checkout master && git fetch origin && echo && git sl master..origin/master && echo && git pull --quiet && git checkout -
  newauthor = commit --amend --reset-author -C HEAD
  next = !git add . && git rebase --continue
  pending = !git fetch origin && git fetch production && git log --reverse production/master..origin/master
  pl = pull
  ps = push
  pr = !git push -u && hub pull-request
  r = rebase -i origin/master
  rbc = !git rebase --continue && git status
  rbi = !git fetch origin && git rebase -i origin/master
  ready = !git fetch origin && git rebase --interactive origin/master && git rebase origin/master --ignore-date && git push -f && git mm && git push
  rc = rebase --continue
  rh = reset --hard HEAD
  riu = !git rebase -i $(git rev-parse --abbrev-ref --symbolic-full-name @{u})
  rid = !git rebase -i $(git merge-base develop HEAD)
  rim = !git rebase -i $(git merge-base master HEAD)
  rmup = !git mup && git rebase master
  rs = rebase -i HEAD~2
  s = status
  sl = log --oneline --decorate -20
  sla = log --oneline --decorate --graph --all -20
  slp = log --oneline --decorate
  slap = log --oneline --decorate --graph --all
  st = status -sb
  sp = stash pop
  todo = !git log --format=%B -n 1 | grep -A999 '^This change$'
  uncommit = reset --soft HEAD^
  unstage = reset HEAD
  up = !git fetch origin && git rebase origin/master
  upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
  ureset = !git reset --hard $(git upstream)
  unwip = !test "`git log -n1 --pretty=format:%s`" = "wip" && git reset HEAD~1
  wip = !git add -A && git commit -m "wip"
  # Below are steps to clone all the branches in a remote repo
  # mkdir <new cloned repo>
  # cd <new cloned repo>
  # git clone --mirror https://github.com/thoughtbot/upcase.git .git
  # git config --bool core.bare false
  # git reset --hard
[core]
  #excludesfile = ~/.gitignore_global
  excludesfile = ~/.gitignore
  autocrlf = input
  editor = vim
[color]
  # Color everything.
  ui = auto
[color "diff"]
  # Color syntax: <foreground> <background>
  # So "normal red" is normal foreground, red background
  # BUT bold is a modifier, so "bold green red" means
  #   "bold green" foreground, red background
  whitespace = red reverse
  plain = black
  meta = cyan
  frag = magenta bold
  old = red
  new = green
  commit = yellow
[color "status"]
  # Options:
  # header: the header text of the status message
  # added/updated: added but not committed
  # changed: changed but not added in the index
  # untracked
  # nobranch: the color the "no branch" warning is shown in (default red)
  added = yellow # files deleted with "git rm" are this color too
  changed = green # deleted items NOT done with "git rm" are this color too
  untracked = cyan
[commit]
  template = ~/.gitmessage
[color "diff"]
  meta = blue black ul
[diff]
  tool = vimdiff
[push]
  default = simple
  #default = upstream
[merge]
#  will not allow for git merge --squash operations
#  ff = only
[fetch]
  prune = true
[format]
  # git log uses --pretty format by default, so this changes the default
  # format. It looks like this:
  # 4436819 (HEAD, origin/master, master) Short commit message [Gabe Berke-Williams, 23 hours ago]
  pretty = %C(magenta reverse)%h%Creset%Cgreen%d %Creset%C(blue)%s %C(magenta)[%an, %cr]
[gitsh "color"]
  default = cyan
[gitsh]
  defaultcommand = status -sb
  gitcommand = hub
  nogreeting = true
  prompt = "\n%D %c(%b%#)%w âžœ"
